// <auto-generated />
using System;
using CarRentalDAL.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalDAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240815170959_setting up db connection")]
    partial class settingupdbconnection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentalDAL.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailableForRent")
                        .HasColumnType("bit");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentalDAL.Entities.RentalAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRequestedForReturn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReturnRequestAcceptedByAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RentalAgreements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aa7b4052-26f0-45e1-8a71-9696b72e5a6e",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f6fea603-3575-4131-b615-d478459f1750",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eef1e07f-f3d4-4750-9fb3-2e07fe5e1106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53811994-5985-4145-810b-e7f9ddc992a4",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMkryKTZlNAAOoyDGsIC7iSU4/m+8OpzcqEVWCkS7TNtZIt9l9Sxs3uZC7djTDpQMw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "896a2239-d667-4646-98e9-884cbbcaecf5",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "bddc4c63-8968-4861-828e-cb026935f35b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7571ac13-6eb9-439c-872b-9252c99991f3",
                            Email = "aditi@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADITI@ABC.COM",
                            NormalizedUserName = "ADITI",
                            PasswordHash = "AQAAAAEAACcQAAAAEKmGWQuuIN4AXE5w4hSQ5IPSGWBMlJjYNZsT3NAUo7uC4QxESGPT8DxyPIoxpi/H7g==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dbd68617-3a15-4fa4-9d6b-f6564388edbf",
                            TwoFactorEnabled = false,
                            UserName = "Aditi"
                        },
                        new
                        {
                            Id = "2b51fd25-83bf-4eea-b063-7cf8c13ec9de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6929f042-c313-4b9e-919c-25e97599d051",
                            Email = "manish@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANISH@ABC.COM",
                            NormalizedUserName = "MANISH",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9DhezPqX7gKosVVIjBfMRalRJ7faoMO1UqXIIgNYNj4GSxYZ015wx90NkkTjc0Nw==",
                            PhoneNumber = "2222222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9fc736e7-cb0c-4f7d-ac3c-488b8a68132e",
                            TwoFactorEnabled = false,
                            UserName = "Manish"
                        },
                        new
                        {
                            Id = "c49e85f3-8036-4760-8a4f-64c24d4ea0ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "140f13b0-b645-47c9-993d-fbef506a11a6",
                            Email = "ankit@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANKIT@ABC.COM",
                            NormalizedUserName = "ANKIT",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVEEu6ATAGluB/uodzKoEatg8a99nQdCJmDarUwdW5gFCa/74kzRZJr84hf906JTQ==",
                            PhoneNumber = "3333333333",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0c6a39ca-dd05-4714-a9ff-ea2bc17be6b7",
                            TwoFactorEnabled = false,
                            UserName = "Ankit"
                        },
                        new
                        {
                            Id = "bd0a67fa-84e0-4701-bd3a-28a06a2b84fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b1d4940-56f8-4c7a-9607-d3c39a555037",
                            Email = "sachin@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SACHIN@ABC.COM",
                            NormalizedUserName = "SACHIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOYICSkY0kEA1i6p6ivTPv9PJkq4Vt0N+4pF4OeYxSERa2eVVeBVxkJ9eXx4KZ3hEQ==",
                            PhoneNumber = "4444444444",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fad5887d-0f0a-46d3-ab6a-21e190c148c7",
                            TwoFactorEnabled = false,
                            UserName = "Sachin"
                        },
                        new
                        {
                            Id = "a62556e1-c614-45d5-a6c1-73da2299192a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deb48922-a054-4869-b657-01735e7d830b",
                            Email = "devesh@abc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVESH@ABC.COM",
                            NormalizedUserName = "DEVESH",
                            PasswordHash = "AQAAAAEAACcQAAAAEAU7SS4f7dxb3viQ17mBKRK+eE7Ekbls3hpzZ6ynkQ8Gods5FqWBytOBAwAWT5IJeg==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d0093c1b-1043-442c-95b7-be3bde779edd",
                            TwoFactorEnabled = false,
                            UserName = "Devesh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "eef1e07f-f3d4-4750-9fb3-2e07fe5e1106",
                            RoleId = "aa7b4052-26f0-45e1-8a71-9696b72e5a6e"
                        },
                        new
                        {
                            UserId = "bddc4c63-8968-4861-828e-cb026935f35b",
                            RoleId = "f6fea603-3575-4131-b615-d478459f1750"
                        },
                        new
                        {
                            UserId = "2b51fd25-83bf-4eea-b063-7cf8c13ec9de",
                            RoleId = "f6fea603-3575-4131-b615-d478459f1750"
                        },
                        new
                        {
                            UserId = "c49e85f3-8036-4760-8a4f-64c24d4ea0ce",
                            RoleId = "f6fea603-3575-4131-b615-d478459f1750"
                        },
                        new
                        {
                            UserId = "bd0a67fa-84e0-4701-bd3a-28a06a2b84fc",
                            RoleId = "f6fea603-3575-4131-b615-d478459f1750"
                        },
                        new
                        {
                            UserId = "a62556e1-c614-45d5-a6c1-73da2299192a",
                            RoleId = "f6fea603-3575-4131-b615-d478459f1750"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
